var search_data = {"index":{"searchIndex":["inspector","console","options","runner","separator","object","testconsole","testoptions","testseparator","char_if_pressed()","fix()","get_file_from_history()","initialize_infile()","initialize_options()","new()","new()","new()","print_statistics()","process()","prompt()","run()","save_result_files()","setup()","setup()","teardown()","readme"],"longSearchIndex":["inspector","inspector::console","inspector::options","inspector::runner","inspector::separator","object","testconsole","testoptions","testseparator","inspector::console#char_if_pressed()","inspector::separator#fix()","inspector::options#get_file_from_history()","testseparator#initialize_infile()","testseparator#initialize_options()","inspector::options::new()","inspector::runner::new()","inspector::separator::new()","inspector::separator#print_statistics()","inspector::separator#process()","inspector::console#prompt()","inspector::runner#run()","inspector::options#save_result_files()","testoptions#setup()","testseparator#setup()","testoptions#teardown()",""],"info":[["Inspector","","Inspector.html","","<p>This module encapsulates functionality related to scanning values for\npatterns. If a line contains the …\n"],["Inspector::Console","","Inspector/Console.html","","<p>Console provides functions for user input\n"],["Inspector::Options","","Inspector/Options.html","","<p>Parses the provided command line flags, switches and arguments\n"],["Inspector::Runner","","Inspector/Runner.html","","<p>Processes based on the provided command line arguments the scan of the file\nor shows the last processed …\n"],["Inspector::Separator","","Inspector/Separator.html","","<p>The Separator scans the input file for a provided pattern and prints the\nresults of the scan to the console. …\n"],["Object","","Object.html","",""],["TestConsole","","TestConsole.html","","<p>Tests the Console class\n"],["TestOptions","","TestOptions.html","","<p>Test of the Options class\n"],["TestSeparator","","TestSeparator.html","","<p>Tests the Separator class\n"],["char_if_pressed","Inspector::Console","Inspector/Console.html#method-i-char_if_pressed","()","<p>Listens for key presses and returns the pressed key without pressing return\n"],["fix","Inspector::Separator","Inspector/Separator.html#method-i-fix","(value, pattern)","<p>Prompts the PROMPT_STRING and tests the value against the pattern\n<p>Return a hash with :value and :answer …\n"],["get_file_from_history","Inspector::Options","Inspector/Options.html#method-i-get_file_from_history","(type)","<p>After running the application output files are saved in the history.\n–get_file_from_history– retrieves …\n"],["initialize_infile","TestSeparator","TestSeparator.html#method-i-initialize_infile","(values = [], separator)","<p>Initilize the infile with provided values and separating the values with\nthe provided separator\n"],["initialize_options","TestSeparator","TestSeparator.html#method-i-initialize_options","(opts={})","<p>Overrides some of the standard @optinons initialized in setup\n"],["new","Inspector::Options","Inspector/Options.html#method-c-new","(argv)","<p>Initializes Options and parses the provided user input from the command\nline\n"],["new","Inspector::Runner","Inspector/Runner.html#method-c-new","(argv)","<p>Initializes runner and invokes Options with the command line arguments\nprovided\n"],["new","Inspector::Separator","Inspector/Separator.html#method-c-new","()","<p>Initializes the Separator and creating a Console object\n"],["print_statistics","Inspector::Separator","Inspector/Separator.html#method-i-print_statistics","(opts)","<p>Prints the results of the invokation of Separator.process\n"],["process","Inspector::Separator","Inspector/Separator.html#method-i-process","(opts)","<p>Processes the scan of the lines of the file and add the values eather to\nthe valid or invalid values. …\n"],["prompt","Inspector::Console","Inspector/Console.html#method-i-prompt","(choice_line)","<p>Prompts the user for input.\n<p>choice_line is the prompt string. If the prompt string contains a (x)\nsequence …\n"],["run","Inspector::Runner","Inspector/Runner.html#method-i-run","()","<p>Runs the Separator or shows the requested valid or invalid file. To show\nthe file ‘less’ is used.\n"],["save_result_files","Inspector::Options","Inspector/Options.html#method-i-save_result_files","(opts)","<p>Save the results of the last run of the application to\n<code>.sycspector.data</code>. It contains the valid and invalid …\n"],["setup","TestOptions","TestOptions.html#method-i-setup","()","<p>Intializes the input, valid, invalid and history file\n"],["setup","TestSeparator","TestSeparator.html#method-i-setup","()","<p>Initialize the @options\n"],["teardown","TestOptions","TestOptions.html#method-i-teardown","()","<p>Cleans up the test directory by deleting the files created in setup\n"],["README","","README.html","","<p>syc-spector - Dokumentation\n\n<pre>home :: https://github.com/sugaryourcoffee/syc-spector</pre>\n<p>Description\n"]]}}